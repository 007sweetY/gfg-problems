Floor in BST
MediumAccuracy: 51.06%Submissions: 55K+Points: 4
90% Refund available on all premium courses 
Discover How  

banner
You are given a BST(Binary Search Tree) with n number of nodes and value x. your task is to find the greatest value node of the BST which is smaller than or equal to x.
Note: when x is smaller than the smallest node of BST then returns -1.

Example:

Input:
n = 7               2
                     \
                      81
                    /     \
                 42       87
                   \       \
                    66      90
                   /
                 45
x = 87
Output:
87
Explanation:
87 is present in tree so floor will be 87.
Example 2:

Input:
n = 4                     6
                           \
                            8
                          /   \
                        7       9
x = 11
Output:
9
Your Task:-
You don't need to read input or print anything. Complete the function floor() which takes the integer n and BST and integer x returns the floor value.

Constraint:
1 <= Noda data <= 109
1 <= n <= 105

Expected Time Complexity: O(height of tree)
Expected Space Complexity: O(height of tree)





================================================================================================================================================



class TreeNode:
    def __init__(self, data=0, left=None, right=None):
        self.data = data
        self.left = left
        self.right = right

class Solution:
    def floor(self, root: TreeNode, x: int) -> int:
        floor_val = -1

        while root:
            if root.data == x:
                return root.data
            elif root.data < x:
                floor_val = root.data
                root = root.right
            else:
                root = root.left

        return floor_val
