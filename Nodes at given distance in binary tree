Nodes at given distance in binary tree
HardAccuracy: 32.36%Submissions: 78K+Points: 8
90% Refund available on all premium courses 
Discover How  

banner
Given a binary tree, a target node in the binary tree, and an integer value k, find all the nodes that are at distance k from the given target node. No parent pointers are available.
Note:

You have to return the list in sorted order.
The tree will not contain duplicate values.
Example 1:

Input:      
          20
        /    \
      8       22 
    /   \
   4    12 
       /   \
      10    14
Target Node = 8
K = 2
Output: 10 14 22
Explanation: The three nodes at distance 2
from node 8 are 10, 14, 22.

Example 2:

Input:      
         20
       /    \
      7      24
    /   \
   4     3
        /  
       1    
Target Node = 7
K = 2
Output: 1 24
Your Task:  
You don't need to read input or print anything. Complete the function KDistanceNodes() which takes the root of the tree, target, and K as input parameters and returns a list of nodes at k distance from target in a sorted order.

Expected Time Complexity: O(N*logN)
Expected Auxiliary Space: O(Height of tree)

Constraints:
1 ≤ N ≤ 105
1 ≤ data of node ≤ 109
1 ≤ target ≤ 109
1 ≤ k ≤ 20

=====================================================================================================================================================

class TreeNode:
    def __init__(self, data=0, left=None, right=None):
        self.data = data
        self.left = left
        self.right = right

class Solution:
    def height(self, root):
        if root is None:
            return 0
        return max(self.height(root.left), self.height(root.right)) + 1

    def findTarget(self, root, target, k):
        if root is None:
            return -1

        if root.data == target:
            self.findKNodesDown(root, k)
            return 0

        left_distance = self.findTarget(root.left, target, k)
        if left_distance != -1:
            if left_distance + 1 == k:
                self.result.append(root.data)
            else:
                self.findKNodesDown(root.right, k - left_distance - 2)
            return 1 + left_distance

        right_distance = self.findTarget(root.right, target, k)
        if right_distance != -1:
            if right_distance + 1 == k:
                self.result.append(root.data)
            else:
                self.findKNodesDown(root.left, k - right_distance - 2)
            return 1 + right_distance

        return -1

    def findKNodesDown(self, root, k):
        if root is None or k < 0:
            return

        if k == 0:
            self.result.append(root.data)
            return

        self.findKNodesDown(root.left, k - 1)
        self.findKNodesDown(root.right, k - 1)

    def KDistanceNodes(self, root, target, k):
        self.result = []
        self.findTarget(root, target, k)
        self.result.sort() # Sorting the result in ascending order
        return self.result
